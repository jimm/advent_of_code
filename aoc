#!/bin/bash
#
# Advent of Code launcher and utilities.

HERE="$(cd "$(dirname "$0")" && pwd)"

usage() {
    cat <<EOS
usage: $(basename "$0") [-m] [-i] [-y year] [-d day] [-l lang] [-Y] [-L] \\
           [-t] [-h] part_num

  -D       Sets environment variable DEBUG=true
  -L       List languages available for a year (current by default) year
             and exit
  -Y       List years and exits
  -a dir   Advent of Code root directory. Default is \$aoc
  -c cookie Session cookie of the form "session-...". Overrides \$AOC_COOKIE
  -d day   Default is current day of the month or, if negative, offset from
           current day (-1 == yesterday)
  -f       When initializing, overwrite existing file
  -h       Print this help and exit
  -i       Initialize the current/specified day (language specific)
  -I       Initialize the current/specified day (language specific)
             and open it using \$EDITOR
  -k       Keep day's HTML file /tmp/dayDD.html instead of deleting it
  -l lang  Which language to use. Required only if there is more than one
             languange for a year and \$AOC_LANG is not defined
  -m       Run \`makeup\` first
  -n       Print the run command but does not run it. Other commands are run
  -o       Open the day's puzzle page in a browser and exit (run after init)
  -T       Use `time` to output the solution execution time after it has run
  -t       Testing
  -y year  Default is current year or, if negative, offset from current year
           (-1 == last year)

A few options don't require \`part_num\`: \`-Y\` (list years), \`-L\` (list
languages), and \`-i\` (init).
EOS
    exit "$1"
}

list_years() {
    find . -type d -name 'y[0-9][0-9][0-9][0-9]' -print0 \
        | xargs -0 basename \
        | sed -e 's/y//' \
        | sort -u
}

list_langs() {
    find . -type d -name "y$1" \
        | grep -v /data/y \
        | grep -v /test/y \
        | sed -e 's#^\./##' -e 's#/.*##'
}

find_lang_for_year() {
    if [ -n "$AOC_LANG" ] ; then
        echo $AOC_LANG
        return
    fi

    langs=( $(list_langs $1) )
    if [[ ${#langs[@]} == 0 ]] ; then
        echo no languages found for year $1
        exit 1
    fi
    if [[ ${#langs[@]} > 1 ]] ; then
        echo too many languages found for year $1 >&2
        echo use -l option to specify language >&2
        echo use -L option to list available languages >&2
        exit 1
    fi
    echo ${langs[0]}
}

exit_if_exists() {
    if [ "$force" = "no" ] && [ -e "$1" ] ; then
        echo file already exists, no changes made >&2
        echo "$(pwd)/$1"
        exit 0
    fi
}

dir="$aoc"
this_year=$(date "+%Y")
year=$this_year
today=$(date "+%d" | sed -e 's/^0//')
day=$today
makeup=0
init=0
edit=0
list_years_flag=no
list_langs_flag=no
lang=""
testing=""
debug=""
run_or_echo=""
force=no
keep_tmpfile=no
open_puzzle=no
cookie="$AOC_COOKIE"
time=""

while getopts "DLYa:c:d:fhiIkl:mnoTty:" opt ; do
    case $opt in
        D)
            export DEBUG=true
            debug=1
            ;;
        L) list_langs_flag=yes ;;
        Y) list_years_flag=yes ;;
        a) dir="$OPTARG" ;;
        c) cookie="$OPTARG" ;;
        d)
            day="$OPTARG"
            if [ $day -le 0 ] ; then
                day=$(( today + day ))
            fi
            ;;
        f) force=yes ;;
        h) usage 0 ;;
        i) init=1 ;;
        I)
            init=1
            edit=1
            ;;
        k) keep_tmpfile=yes ;;
        l) lang="$OPTARG" ;;
        m) makeup=1 ;;
        n) run_or_echo="echo" ;;
        o) open_puzzle=yes ;;
        t) testing=1 ;;
        T) time="time" ;;
        y)
            year="$OPTARG"
            if [ $year -le 0 ] ; then
                year=$(( this_year + year ))
            fi
            ;;
        *) usage 1 ;;
    esac
done
shift $((OPTIND-1))
part_num=$1
if [ -z "$part_num" ] && [ $list_years_flag = "no" ] && [ $list_langs_flag = "no" ] && [ $init = 0 ]; then
    usage 1
fi

cd $dir

if [ $list_years_flag = "yes" ] ; then
    list_years
    exit 0
fi

if [ $list_langs_flag = "yes" ] ; then
    list_langs $year
    exit 0
fi

if [ -z "$lang" ] ; then
    lang=$(find_lang_for_year $year $lang)
fi

cd "$lang" > /dev/null 2>&1 || ( echo "error: language required" ; exit 1 )

if [ $init == 1 ] ; then
    tmpfile="/tmp/day${day}.html"
    datafile="${HERE}/data/y${year}/day${two_digit_day}_1.txt"
    if [ $keep_tmpfile = "no" ] ; then
        trap "rm -f $tmpfile" EXIT HUP INT TERM
    fi

    two_digit_day="$(printf '%02d' $day)"
    f=""

    # Download the puzzle page
    url="https://adventofcode.com/$year/day/$day"
    if [ -n "$cookie" ] ; then
        curl --silent --cookie "$cookie" -o $tmpfile "$url"
    else
        curl --silent -o $tmpfile "$url"
    fi
    puzzle_name=$(grep -- '--- Day' < $tmpfile | sed -e 's/.*--- Day [0-9]*: //' -e 's/ ---.*//')
    if [ -z "$puzzle_name" ] ; then
        puzzle_name="Year $year, Day $day"
    fi

    # Download the data file if the page says we have input and we have a
    # cookie to use.
    grep 'get your puzzle input' < $tmpfile >/dev/null
    if [ $? -eq 0 ] && [ -n "$cookie" ] ; then
        data_dir="$dir/data/y$year"
        mkdir -p "$data_dir"
        curl --silent --cookie "$cookie" -o "$data_dir/day${two_digit_day}_1.txt" "$url/input"
    fi

    # Copy language-specific template and fill in variables PUZZLENAME,
    # YEAR, DAY, YEARNAME, and DAYNAME.
    case $lang in
        crystal)
            mkdir -p "src/y${year}"
            f="src/y${year}/day${two_digit_day}.ex"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# ================ $puzzle_name ================" \
               -DYEARNAME="Year${year}" -DDAYNAME="Day${two_digit_day}" \
               src/template.cr > $f
            ;;
        elixir)
            mkdir -p "lib/y${year}"
            f="y${year}/day${two_digit_day}.ex"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# ================ $puzzle_name ================" \
               -DYEARNAME="Y${year}" -DDAYNAME="Day${two_digit_day}" \
               lib/template.ex > $f
            ;;
        janet)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.janet"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# $puzzle_name" \
               -DYEAR=$year -DDAY=$day \
               template.janet > $f
            ;;
        lisp)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.lisp"
            exit_if_exists "$f"
            m4 -DPUZZLENAME=";;; ================ $puzzle_name ================" \
               -DYEAR=$year -DDAY=$day \
               template.lisp > $f
            ;;
        python)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.py"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# ================ $puzzle_name ================" \
               -DYEARNAME="$year" -DDAYNAME="$day" \
               template.py > $f
            ;;
        ruby)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.rb"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# ================ $puzzle_name ================" \
               -DYEAR=$year -DDAY=$day -DDAYNAME="Day${two_digit_day}" \
               template.rb > $f
            ;;
        *)
            echo error: language required
            exit 1
            ;;
    esac
    if [ -n "$f" ] ; then
        echo "$(pwd)/$f"
        if [ $edit == 1 ] ; then
            exec $EDITOR "$f"
        fi
        exit 0
    else
        echo language "'${lang}'" not found
        exit 1
    fi
fi

if [ $open_puzzle = "yes" ] ; then
    open "https://adventofcode.com/$year/day/$day"
    exit 0
fi

if [ $makeup == 1 ] ; then
    makeup || exit 1
fi

# We are currently in the directory ./$lang. Call the corresponding runner
# script or do whatever else it takes to run the day's solutions, passing in
# the year and day options, testing flag, and part number.
case $lang in
    crystal)
        if [ -n "$testing" ] ; then
            testing="-t"
        fi
        $run_or_echo $time bin/aoc -y $year -d $day $testing $part_num
    ;;
    elixir)
        day=$(printf '%02d' $day)
        test=""
        if [ -n "$testing" ] ; then
            test="_test"
        fi
        $run_or_echo $time iex -S mix <<EOS
Y$year.Day$day.run$part_num$test
System.halt(0)
EOS
    ;;
    janet)
        cd y$year > /dev/null 2>&1 || ( echo "error: dir y$year missing" ; exit 1 )
        day=$(printf '%02d' $day)
        if [ -n "$testing" ] ; then
            testing="-t"
        fi
        $run_or_echo $time /usr/bin/env janet ./day${day}.janet $testing $part_num
        ;;
    lisp)
        cd y$year > /dev/null 2>&1 || ( echo "error: dir y$year missing" ; exit 1 )
        day=$(printf '%02d' $day)
        test=""
        part="part"
        if [ -n "$testing" ] ; then
            test="test-"
        fi
        if [ $year = "2017" ] && ( [ $day = "10" ] || [ $day = "14" ] ) ; then
            part="day${day}-part"
        fi
        TMPFILE="$(mktemp -t "$(basename "$0")")"
        trap 'rm -rf $TMPFILE' EXIT HUP INT TERM
        cat > "$TMPFILE" <<EOF
(load "../load")
(load "day$day")
(print (${test}${part}${part_num}))
EOF
        $run_or_echo $time /usr/bin/env sbcl --noinform --non-interactive --load "$TMPFILE"
    ;;
    python)
        if [ -n "$testing" ] ; then
            testing="-t"
        fi
        $run_or_echo $time ./aoc.py -y $year -d $day $testing $part_num
        ;;
    ruby)
        debug=""
        if [ -n "$debug" ] ; then
            debug="--debug"
        fi
        if [ -n "$testing" ] ;then
            testing="-t"
        fi
        $run_or_echo $time ./aoc.rb -y $year -d $day $testing $debug $part_num
        ;;
esac
