#!/bin/bash
#
# Advent of code launcher.

usage() {
    cat <<EOS
usage: $(basename "$0") [-m] [-i] [-y year] [-d day] [-l lang] [-Y] [-L] \\
           [-t] [-h] part_num

  -m       Run \`makeup\` first
  -a dir   Advent of Code root directory. Default is \$aoc
  -i       Initialize the current/specified day (language specific)
  -y year  Default is current year or, if negative, offset from
           current year (-1 == last year)
  -d day   Default is current day of the month or, if negative,
           offset from current day (-1 == yesterday)
  -l lang  Required only if more than one lang for a year
  -Y       List years
  -L       List languages available for the current year and exit
  -t       Testing
  -f       When initializing, overwrite existing file
  -n       Print commands but do not run them
  -h       Print this help and exit

A few options don't require \`part_num\`: \`-Y\` (list years), \`-L\` (list
languages), and \`-i\` (init).
EOS
    exit "$1"
}

list_years() {
    find . -type d -name 'y[0-9][0-9][0-9][0-9]' -print0 \
        | xargs -0 basename \
        | sed -e 's/y//' \
        | sort -u
}

list_langs() {
    find . -type d -name "y$1" \
        | grep -v /data/y \
        | grep -v /test/y \
        | sed -e 's#^\./##' -e 's#/.*##'
}

find_lang_for_year() {
    langs=( $(list_langs $1) )
    if [[ ${#langs[@]} == 0 ]] ; then
        echo no languages found for year $1
        exit 1
    fi
    if [[ ${#langs[@]} > 1 ]] ; then
        echo too many languages found for year $1 >&2
        echo use -l option to specify language >&2
        echo use -L option to list available languages >&2
        exit 1
    fi
    echo ${langs[0]}
}

exit_if_exists() {
    if [ "$force" = "no" ] && [ -e "$1" ] ; then
        echo file already exists, no changes made >&2
        echo "$(pwd)/$1"
        exit 0
    fi
}

dir="$aoc"
this_year=$(date "+%Y")
year=$this_year
today=$(date "+%d" | sed -e 's/^0//')
day=$today
makeup=0
init=0
list_years=no
list_langs=no
lang=""
testing=""
no_execute=""
force=no

while getopts "maiy:d:l:YLtfnh" opt ; do
    case $opt in
        m) makeup=1 ;;
        a) dir="$OPTARG" ;;
        i) init=1 ;;
        y)
            year="$OPTARG"
            if [ $year -le 0 ] ; then
                year=$(( this_year + year ))
            fi
            ;;
        d)
            day="$OPTARG"
            if [ $day -le 0 ] ; then
                day=$(( today + day ))
            fi
            ;;
        l) lang="$OPTARG" ;;
        Y) list_years=yes ;;
        L) list_langs=yes ;;
        t) testing=1 ;;
        f) force=yes ;;
        n) no_execute="echo" ;;
        h) usage 0 ;;
        *) usage 1 ;;
    esac
done
shift $((OPTIND-1))
part_num=$1
if [ -z "$part_num" ] && [ $list_years = "no" ] && [ $list_langs = "no" ] && [ $init = 0 ]; then
    usage 1
fi

cd $dir

if [ $list_years = "yes" ] ; then
    list_years
    exit 0
fi

if [ $list_langs = "yes" ] ; then
    list_langs $year
    exit 0
fi

if [ -z "$lang" ] ; then
    lang=$(find_lang_for_year $year $lang)
fi

cd $lang > /dev/null 2>&1 || ( echo "error: language required" ; exit 1 )

if [ $init == 1 ] ; then
    tmpfile="/tmp/day${day}.html"
    two_digit_day="$(printf '%02d' $day)"
    f=""
    data_file="../data/y${year}/day${two_digit_day}_1.txt"

    curl --silent -o $tmpfile "https://adventofcode.com/$year/day/$day"
    puzzle_name=$(cat $tmpfile  | grep -- '--- Day' | sed -e 's/.*--- Day [0-9]*: //' -e 's/ ---.*//')
    if [ -z "$puzzle_name" ] ; then
        puzzle_name="Year $year, Day $day"
    fi

    if [ ! -f $data_file ] ; then
        grep "get your puzzle input" $tmpfile \
            && mkdir -p "../data/y${year}" \
            && curl --silent -o $data_file
    fi
    rm $tmpfile

    case $lang in
        crystal)
            mkdir -p "src/y${year}"
            f="src/y${year}/day${two_digit_day}.ex"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# $puzzle_name" -DYEARNAME="Year${year}" \
               -DDAYNAME="Day${two_digit_day}" src/template.cr > $f
            ;;
        elixir)
            mkdir -p "lib/y${year}"
            f="y${year}/day${two_digit_day}.ex"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# $puzzle_name" -DYEARNAME="Y${year}" \
               -DDAYNAME="Day${two_digit_day}" lib/template.ex > $f
            ;;
        lisp)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.lisp"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="$puzzle_name" -DYEAR=$year -DDAY=$day \
               template.lisp > $f
            ;;
        python)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.py"
            exit_if_exists "$f"
            m4 -DPUZZLENAME="# $puzzle_name" -DYEARNAME="$year" -DDAYNAME="$day" \
               template.py > $f
            ;;
        ruby)
            mkdir -p "y${year}"
            f="y${year}/day${two_digit_day}.rb"
            exit_if_exists "$f"
            m4 -DYEAR=$year -DDAY=$day -DPUZZLENAME="# $puzzle_name" -DDAYNAME="Day${two_digit_day}" \
               template.rb > $f
            ;;
        *)
            echo error: language required
            exit 1
            ;;
    esac
    if [ -n "$f" ] ; then
        echo "$(pwd)/$f"
        exit 0
    else
        echo language "'${lang}'" not found
        exit 1
    fi
fi

if [ $makeup == 1 ] ; then
   makeup || exit 1
fi

case $lang in
    crystal)
        if [ -n "$testing" ] ; then
            testing="-t"
        fi
        $no_execute bin/aoc -y $year -d $day $testing $part_num
    ;;
    elixir)
        day=$(printf '%02d' $day)
        test=""
        if [ -n "$testing" ] ; then
            test="_test"
        fi
        $no_execute iex -S mix <<EOS
Y$year.Day$day.run$part_num$test
System.halt(0)
EOS
    ;;
    lisp)
        cd y$year
        day=$(printf '%02d' $day)
        test=""
        part="part"
        if [ -n "$testing" ] ; then
            test="test-"
        fi
        if [ $year = "2017" ] && ( [ $day = "10" ] || [ $day = "14" ] ) ; then
            part="day${day}-part"
        fi
        $no_execute sbcl <<EOS
(load "../utils.lisp")
(load "day$day.lisp")
(${test}${part}${part_num})
EOS
    ;;
    python)
        if [ -n "$testing" ] ; then
            testing="-t"
        fi
        $no_execute ./aoc.py -y $year -d $day $testing $part_num
        ;;
    ruby)
        if [ -n "$testing" ] ;then
            testing="-t"
        fi
        $no_execute ./aoc.rb -y $year -d $day $testing $part_num
        ;;
esac
